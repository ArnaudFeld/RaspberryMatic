#!/bin/sh
#
# Startup script checking for RF capabale hardware
#

# function to identify rf hardware
identify_rf_hardware() {

  # setup default HM RF variables
  HM_MODE="NORMAL"
  HM_HMRF_DEV=""
  HM_HMRF_DEVNODE=""
  HM_HMIP_DEV=""
  HM_HMIP_DEVNODE=""

  # until we have a proper tool to identify the
  # type of the GPIO rf module we assume a RPI-RF-MOD
  # as soon as we have found a rx8130 RTC clock
  if [[ "${HM_RTC}" == "rx8130" ]]; then
    HM_HMRF_DEV="RPI-RF-MOD"
    HM_HMIP_DEV="RPI-RF-MOD"

    # make sure the LED of the RPI-RF-MOD is setup correctly
    # even thought udev might have reset the gpio modes
    /usr/bin/gpio mode 27 out
    /usr/bin/gpio mode 28 out
    /usr/bin/gpio mode 29 out

    # setup the LEDs to show a constant yellow light
    echo default-on >/sys/class/leds/rpi_rf_mod\:green/trigger
    echo default-on >/sys/class/leds/rpi_rf_mod\:red/trigger
    echo none >/sys/class/leds/rpi_rf_mod\:blue/trigger
  else
    HM_HMRF_DEV="HM-MOD-RPI-PCB"
    HM_HMIP_DEV="HM-MOD-RPI-PCB"
  fi

  # check if a HmIP-RFUSB (1b1f:c020) USB stick is connected
  # and set HMIP_DEV and HMIP_DEVNODE accordingly
  if lsusb | grep -q 1b1f:c020; then
    modprobe cp210x
    echo 1b1f c020 >/sys/bus/usb-serial/drivers/cp210x/new_id
    for i in $(find /sys/bus/usb/devices/usb*/ -name "ttyUSB*" -maxdepth 4); do
      DEVDIR=$(dirname $i)
      if [[ -f "${DEVDIR}/uevent" ]]; then
        if grep -q PRODUCT=1b1f/c020 ${DEVDIR}/uevent; then
          HM_HMIP_DEV="HMIP-RFUSB"
          HM_HMIP_DEVNODE=/dev/$(basename $i)
          break
        fi
      fi
    done
  fi

  # check if a HM-CFG-USB-2 (1b1f:c00f) USB stick is connected
  # and HMRF_DEV accordingly
  if lsusb | grep -q 1b1f:c00f; then
    HM_HMRF_DEV="HM-CFG-USB-2"
  fi

  # check if we should boot in LAN gateway mode
  if [[ -e /usr/local/HMLGW ]]; then
    HM_MODE="HM-LGW"
  fi
}

# function to init rf hardware
init_rf_hardware() {
  # depending on the HomeMatic mode (HmRF, HmIP) we
  # have to load different kernel modules.
  if [[ "${HM_HMRF_DEV}" == "HM-MOD-RPI-PCB" ]] ||
     [[ "${HM_HMIP_DEV}" == "HM-MOD-RPI-PCB" ]] ||
     [[ "${HM_HMRF_DEV}" == "RPI-RF-MOD" ]] ||
     [[ "${HM_HMIP_DEV}" == "RPI-RF-MOD" ]]; then

    if [[ "${HM_HMRF_DEV}" == "HM-MOD-RPI-PCB" ]] ||
       [[ "${HM_HMRF_DEV}" == "RPI-RF-MOD" ]]; then
      if [[ -c "${HM_HOST_GPIO_UART}" ]]; then
        HM_HMRF_DEVNODE="${HM_HOST_GPIO_UART}"
      fi
    fi

    if [[ "${HM_HMIP_DEV}" == "HM-MOD-RPI-PCB" ]] ||
       [[ "${HM_HMIP_DEV}" == "RPI-RF-MOD" ]]; then
      if [[ -c "${HM_HOST_GPIO_UART}" ]]; then
        HM_HMIP_DEVNODE="${HM_HOST_GPIO_UART}"
      fi
    fi

    # make sure to set low latency serial mode
    if [[ ${HM_HOST_GPIO_UART} != "/dev/raw-uart" ]]; then
      /bin/setserial ${HM_HOST_GPIO_UART} low_latency >/dev/null 2>&1
    fi

    # reset the GPIO rf module by switching its reset pin
    # (pin 12 - GPIO.1) off and on with a short delay
    /usr/bin/gpio mode 1 out
    /usr/bin/gpio write 1 0
    sleep 0.1
    /usr/bin/gpio write 1 1
  fi
}

# function to read out the serial, version and address of the corresponding
# rf module
query_rf_parameters() {

  # check for BidCos-RF (HmRF) Hardware
  if [[ -n "${HM_HMRF_DEVNODE}" ]]; then

    if [[ "${HM_HMRF_DEV}" == "HM-MOD-RPI-PCB" ]]; then
      HM_HMRF_SERIAL=$(/bin/eq3configcmd update-coprocessor -p ${HM_HMRF_DEVNODE} -t HM-MOD-UART -c -se 2>&1 | grep "SerialNumber:" | cut -d' ' -f5 | tr -d '[:space:]')
      if [[ -n "${HM_HMRF_SERIAL}" ]]; then
        HM_HMRF_VERSION=$(/bin/eq3configcmd update-coprocessor -p ${HM_HMRF_DEVNODE} -t HM-MOD-UART -c -v 2>&1 | grep "Version:" | cut -d' ' -f5 | tr -d '[:space:]')
        HM_HMRF_ADDRESS=$(/bin/eq3configcmd read-default-rf-address -f ${HM_HMRF_DEVNODE} -h 2>&1 | grep "^0x" | tr -d '[:space:]')
      else
        HM_HMRF_DEV=""
        HM_HMRF_DEVNODE=""
      fi
    elif [[ "${HM_HMRF_DEV}" == "RPI-RF-MOD" ]]; then
      RF_INFO=$(/opt/java/bin/java -Dgnu.io.rxtx.SerialPorts=${HM_HMRF_DEVNODE} -jar /opt/HmIP/hmip-copro-update.jar -p ${HM_HMRF_DEVNODE} -v -a 2>&1)
      HM_HMRF_SERIAL=$(echo ${RF_INFO} | sed -n 's/.*SGTIN = \([0-9A-Fa-f]\{24\}\).*/\1/p' | tail -c 11)
      if [[ -n "${HM_HMRF_SERIAL}" ]]; then
        HM_HMRF_VERSION=$(echo ${RF_INFO} | sed -n 's/.*Application version = \([0-9]\+\.[0-9]\+\.[0-9]\+\).*/\1/p')
        HM_HMRF_ADDRESS=$(echo ${RF_INFO} | sed -n 's/.*Radio address = \([0-9A-F]\{6\}\).*/0x\1/p')
      else
        HM_HMRF_DEV=""
        HM_HMRF_DEVNODE=""
      fi
    fi

  fi

  # check for HmIP Hardware
  if [[ -n "${HM_HMIP_DEVNODE}" ]]; then

    if [[ "${HM_HMIP_DEV}" == "RPI-RF-MOD" ]] ||
       [[ "${HM_HMIP_DEV}" == "HMIP-RFUSB" ]]; then

      if [[ "${HM_HMIP_DEV}" != "RPI-RF-MOD" ]] || [[ "${HM_HMIP_DEV}" != "${HM_HMRF_DEV}" ]]; then
        RF_INFO=$(/opt/java/bin/java -Dgnu.io.rxtx.SerialPorts=${HM_HMIP_DEVNODE} -jar /opt/HmIP/hmip-copro-update.jar -p ${HM_HMIP_DEVNODE} -v -a 2>&1)
        HM_HMIP_SERIAL=$(echo ${RF_INFO} | sed -n 's/.*SGTIN = \([0-9A-Fa-f]\{24\}\).*/\1/p' | tail -c 11)
        if [[ -n "${HM_HMIP_SERIAL}" ]]; then
          HM_HMIP_VERSION=$(echo ${RF_INFO} | sed -n 's/.*Application version = \([0-9]\+\.[0-9]\+\.[0-9]\+\).*/\1/p')
          HM_HMIP_ADDRESS=$(echo ${RF_INFO} | sed -n 's/.*Radio address = \([0-9A-F]\{6\}\).*/0x\1/p')
        else
          HM_HMIP_DEV=""
          HM_HMIP_DEVNODE=""
        fi
      else
        HM_HMIP_SERIAL=${HM_HMRF_SERIAL}
        HM_HMIP_VERSION=${HM_HMRF_VERSION}
        HM_HMIP_ADDRESS=${HM_HMRF_ADDRESS}
      fi
    fi

  fi

  # save all info about the RF module
  if [[ -n "${HM_HMRF_SERIAL}" ]]; then
    echo "${HM_HMRF_SERIAL}" >/var/board_serial
    echo "${HM_HMRF_VERSION}" >/var/rf_firmware_version
    echo "${HM_HMRF_ADDRESS}" >/var/rf_address
  elif [[ -n "${HM_HMIP_SERIAL}" ]]; then
    echo "${HM_HMIP_SERIAL}" >/var/board_serial
    echo "${HM_HMIP_VERSION}" >/var/rf_firmware_version
    echo "${HM_HMIP_ADDRESS}" >/var/rf_address
  else
    echo "" >/var/board_serial
    echo "" >/var/rf_firmware_version
    echo "" >/var/rf_address
  fi

  if [[ -n "${HM_HMIP_SERIAL}" ]]; then
    echo "${HM_HMIP_SERIAL}" >/var/hmip_board_serial
    echo "${HM_HMIP_VERSION}" >/var/hmip_firmware_version
    echo "${HM_HMIP_ADDRESS}" >/var/hmip_address
  fi
}

start() {
  echo -n "Identifying Homematic RF-Hardware: "

  # source all data from /var/hm_mode
  [[ -r /var/hm_mode ]] && . /var/hm_mode

  identify_rf_hardware
  init_rf_hardware
  query_rf_parameters

  # save all HM_ env variables
  set | grep '^HM_' >/var/hm_mode

  echo "BidCos-RF: ${HM_HMRF_DEV}, HmIP: ${HM_HMIP_DEV}, OK"
}

restart() {
  start
}

case "$1" in
  start)
    start
  ;;
  stop)
    # nothing
  ;;
  restart|reload)
    restart
  ;;
  *)
    echo "Usage: $0 {start|stop|restart}"
    exit 1
esac

exit $?
