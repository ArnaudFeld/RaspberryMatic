var util=require("util"),EventEmitter=require("events"),x=x||{};x.hub=x.hub||{};x.hub.m=x.hub.m||{};x.hub.m.openhab=x.hub.m.openhab||{};x.hub.m.openhab.MODULE=require("xnm.aio.openhab.js");
x.hub.m.openhab.Monitor=function(){var e=function(a){this._logger=require("x.logger.js").getLogger("x.hub.m.openhab.Monitor");this._running=!1;this._server=a;this._devices={};this._reconnectTO=null;this._reconnectTimeout=5E3};e.prototype.start=function(a){this._logger.log("debug","start monitor for:"+this._server.ip);this._running||(this._running=!0,this._listenToEventSource());a&&a()};e.prototype.addStateDevice=function(a,b){a&&a.address&&(this._devices[a.address]=a);b&&b()};e.prototype._listenToEventSource=
function(){this._logger.log("debug","connect to openhab server "+this._server.ip+":"+this._server.port);var a=this;this._startHttpConnection(function(b){a._logger.log("debug","disconnectd from openhab server "+a._server.ip+":"+a._server.port+(b?" with error:"+b.message:""));a._logger.log("debug","reconnect after "+a._reconnectTimeout+" seconds");a._reconnectTO=setTimeout(function(){a._listenToEventSource()},a._reconnectTimeout)})};e.prototype._startHttpConnection=function(a){var b=this,c=!1,f=require("http").request({host:this._server.ip,
port:this._server.port,path:"/rest/events",method:"get"},function(d){d.setEncoding("utf-8");c=!0;b._logger.log("trace","server response with status code:"+d.statusCode);if(200!=d.statusCode)d=Error("http error:"+d.statusCode),a&&(a(d),a=null);else{var g="";d.on("data",function(h){b._logger.log("trace","receive message: "+h);g+=h;if(0<=g.indexOf("\n\n")){h=g.split("\n\n");g="";for(var k=0;k<h.length;k++){var l=h[k].trim().split("\n");l[1]&&"data:"==l[1].substr(0,5)&&b._onMessage(l[1].substr(6).trim())}}else 2E4<
g.length&&(b._logger.log("warn","incoming message string has become too long ("+g.length+"). discarding message."),g="")});d.on("end",function(){b._logger.log("trace","http connection closed")});d.on("close",function(){b._logger.log("trace","http connection closed");a&&(a(),a=null)})}});f.setTimeout(2E3,function(){c||(f.abort(),a&&(a(Error("connection timeout")),a=null))});f.on("error",function(d){a&&(a(d),a=null)});f.end()};e.prototype._onMessage=function(a){try{var b=JSON.parse(a);if(b&&b.type&&
b.topic&&b.payload&&"ItemStateChangedEvent"==b.type){var c=b.topic.split("/")[2];if(c&&this._devices[c]){var f=JSON.parse(b.payload);if(f){var d=this._devices[c],g=this._server._toState(d,{state:f.oldValue}),h=this._server._toState(d,{state:f.value}),k;for(k in h)this._produceEvent(d,k,g[k],h[k])}}}}catch(l){}};e.prototype._produceEvent=function(a,b,c,f){c!=f&&(this._logger.log("trace","receive new status:"+JSON.stringify({address:a.address,key:b,value:f})),require("x.hub.eventbus.js").emit("status",
{module:"openhab",device:a,gateway:a.gateway,data:{key:b,value:f,oldvalue:c,changed:!0}}))};return e}();
x.hub.m.openhab.Handler=function(){var e=function(){this._monitors={}};util.inherits(e,EventEmitter);e.prototype.init=function(a){a&&a()};e.prototype.getSystems=function(){return["openhab"]};e.prototype.addStateDevice=function(a,b){a?a.gateway?this._startMonitor(a.gateway,function(c,f){c?b&&b({error:c}):f.addStateDevice(a,function(d){b&&b({error:d})})}):b&&b(Error("device gateway format invalid")):b&&b({error:Error("device json format invalid")})};e.prototype.getState=function(a,b,c){a?a.gateway?
x.hub.m.openhab.MODULE.doStatus("xhub",a.gateway,a,{value:b},function(f,d){f?c&&c({error:f}):d?c&&c({data:{value:d.status}}):c&&c({error:Error("do status failed")})}):c&&c(Error("device gateway format invalid")):c&&c({error:Error("device json format invalid")})};e.prototype.executeCommand=function(a,b,c){x.hub.m.openhab.MODULE.doCommand(a.gateway,a,b,c)};e.prototype.checkDeviceMatch=function(a,b){return b&&b.device&&a&&a.device&&b.gateway&&a.gateway&&b.gateway.ip==a.gateway.ip?b.device.address==a.device.address:
!1};e.prototype._startMonitor=function(a,b){if(a&&a.ip){var c=a.ip;this._monitors[c]?b&&b(null,this._monitors[c]):(a=x.hub.m.openhab.MODULE.resolveGateway(a))?(a=new x.hub.m.openhab.Monitor(a),this._monitors[c]=a,a.start(),b&&b(null,a)):b&&b(Error("gateway format invalid"))}else b&&b(Error("gateway, format invalid"))};return e}();"undefined"!=typeof exports&&"undefined"!=typeof module&&module.exports&&(exports=module.exports=new x.hub.m.openhab.Handler);
