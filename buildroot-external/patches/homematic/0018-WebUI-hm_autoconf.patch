--- homematic/WebUI/bin/hm_autoconf.orig	2017-03-14 16:07:04.403741781 +0100
+++ homematic/WebUI/bin/hm_autoconf	2017-03-13 15:25:22.000000000 +0100
@@ -74,6 +74,7 @@
     # Mapping of channel type to default function for the channel
     array set CHANNEL_FUNCTIONS {
         BLIND                   LIGHT
+        JALOUSIE                LIGHT
         DIMMER                  LIGHT
         VIRTUAL_DIMMER          LIGHT
         KEYMATIC                LOCK
@@ -545,61 +546,69 @@
         set FUNCTIONMAP([lindex $FUNCTIONLIST $i]) $function_id
         incr i 2
     }
-    
-    foreach ise_dev_id [array names devmap] {
-        set dev $devmap($ise_dev_id)
-        set dev_address [lindex $dev 0]
-        set if_id [lindex $dev 1]
-        array_clear channels
-        array set channels [lindex $dev 2]
-        set if_info $ifmap($if_id)
-        set url [lindex $if_info 0]
-        
-        array_clear dev_descr
-        array set dev_descr [xmlrpc $url getDeviceDescription $dev_address]
-        set procname "conf_device_$dev_descr(TYPE)"
-        if {[llength [info procs $procname]]} {
-            if [catch { $procname $url $ise_dev_id dev_descr } errMsg] {
-                puts "$procname $errMsg"
-            }
-        }
-        
-        foreach ise_ch_id [array names channels] {
-            set ch_address $channels($ise_ch_id)
-            array_clear ch_descr
-            array set ch_descr [xmlrpc $url getDeviceDescription $ch_address]
-            if [info exist DEVICE_FUNCTIONS($dev_descr(TYPE))] {
-                catch {
-                    rega "dom.GetObject($FUNCTIONMAP($DEVICE_FUNCTIONS($dev_descr(TYPE)))).Add($ise_ch_id)"
-                }
-            }
-            if [info exist CHANNEL_FUNCTIONS($ch_descr(TYPE))] {
-                catch {
-                    rega "dom.GetObject($FUNCTIONMAP($CHANNEL_FUNCTIONS($ch_descr(TYPE)))).Add($ise_ch_id)"
-                }
-            }
-            set procname "conf_channel_$ch_descr(TYPE)"
-            if {[llength [info procs $procname]]} {
-                if [catch { $procname $url $ise_ch_id ch_descr } errMsg] {
-                    puts "$procname $errMsg"
-                }
-            }
-            if {[llength [info procs "conf_value_$ch_descr(TYPE).*"]]} {
-                array_clear values_descr
-                array set values_descr [xmlrpc $url getParamsetDescription $ch_address "VALUES"]
-                foreach value [array names values_descr] {
-                    set procname "conf_value_$ch_descr(TYPE).$value"
-                    if {[llength [info procs $procname]]} {
-                        array set value_descr $values_descr($value)
-                        if [catch { $procname $url $ise_ch_id ch_descr value_descr } errMsg] {
-                            puts "$procname $errMsg"
-                        }
-                    }
-                }
-            }
-        }
-        rega "dom.GetObject($ise_dev_id).AddMetaData(\"AUTOCONF\");"
-    
+
+    # We need a catch because OSRAM Lightify causes an error (/tmp/hm_autoconf_xxx.log) because a list must have an even number of elements.
+    # set dev $devmap($ise_dev_id) produces something like that:
+    # OL-SurfaceTW 0 1008 { 19913 OL-SurfaceTW 0:0 19914 OL-SurfaceTW 0:1}
+    #
+    # It has to be like this:
+    # JEQ0067507 1007 { 1655 JEQ0067507:1}
+    catch {
+      foreach ise_dev_id [array names devmap] {
+          set dev $devmap($ise_dev_id)
+          set dev_address [lindex $dev 0]
+          set if_id [lindex $dev 1]
+          array_clear channels
+          array set channels [lindex $dev 2]
+          set if_info $ifmap($if_id)
+          set url [lindex $if_info 0]
+
+          array_clear dev_descr
+          array set dev_descr [xmlrpc $url getDeviceDescription $dev_address]
+          set procname "conf_device_$dev_descr(TYPE)"
+          if {[llength [info procs $procname]]} {
+              if [catch { $procname $url $ise_dev_id dev_descr } errMsg] {
+                  puts "$procname $errMsg"
+              }
+          }
+
+          foreach ise_ch_id [array names channels] {
+              set ch_address $channels($ise_ch_id)
+              array_clear ch_descr
+              array set ch_descr [xmlrpc $url getDeviceDescription $ch_address]
+              if [info exist DEVICE_FUNCTIONS($dev_descr(TYPE))] {
+                  catch {
+                      rega "dom.GetObject($FUNCTIONMAP($DEVICE_FUNCTIONS($dev_descr(TYPE)))).Add($ise_ch_id)"
+                  }
+              }
+              if [info exist CHANNEL_FUNCTIONS($ch_descr(TYPE))] {
+                  catch {
+                      rega "dom.GetObject($FUNCTIONMAP($CHANNEL_FUNCTIONS($ch_descr(TYPE)))).Add($ise_ch_id)"
+                  }
+              }
+              set procname "conf_channel_$ch_descr(TYPE)"
+              if {[llength [info procs $procname]]} {
+                  if [catch { $procname $url $ise_ch_id ch_descr } errMsg] {
+                      puts "$procname $errMsg"
+                  }
+              }
+              if {[llength [info procs "conf_value_$ch_descr(TYPE).*"]]} {
+                  array_clear values_descr
+                  array set values_descr [xmlrpc $url getParamsetDescription $ch_address "VALUES"]
+                  foreach value [array names values_descr] {
+                      set procname "conf_value_$ch_descr(TYPE).$value"
+                      if {[llength [info procs $procname]]} {
+                          array set value_descr $values_descr($value)
+                          if [catch { $procname $url $ise_ch_id ch_descr value_descr } errMsg] {
+                              puts "$procname $errMsg"
+                          }
+                      }
+                  }
+              }
+          }
+          rega "dom.GetObject($ise_dev_id).AddMetaData(\"AUTOCONF\");"
+
+      }
     }
 } errorMsg ]} {
     puts "Error: $errorMsg"
